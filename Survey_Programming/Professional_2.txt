Creating 10 text boxes w/ Block vs Page:
    HP Gamer: AdditionalUnaided

    Page
        MetaData: 

            AdditionalUnaided "And what other brands come to mind?"
        [
            ShortName = "S14",
            FullName = "S14_AdditionalUnaided",
            RespondentLogic = "Show to respondent.",
            Logic = "Show to all.",
            ProgrammerComment = "Programmer Comment: Include 10 text boxes.
            Do not show question and autocode opt out if respondent selected opt out at S13",
            RI = "standard"
        ] loop
        {
            _1 "1.",
            _2 "2.",
            _3 "3.",
            _4 "4.",
            _5 "5.",
            _6 "6.",
            _7 "7.",
            _8 "8.",
            _9 "9.",
            _10 "10."
        } fields - 
        (
            TextBoxes ""
            text [1..20];

'  you need a dummy or else the label in textboxes will not show
            Dummy ""
            info;

        ) expand grid;

        OptOutAdditionalUnaided ""
        categorical
        {
            IDontKnow "I don't know any travel center brands" DK
        };
        
        AdditionalUnaidedWOptOut ""
        page(
            AdditionalUnaided,
            OptOutAdditionalUnaided
        );

        Routing:
        ' Sets so that you dont have to answer the text boxes and the optouts 
            AdditionalUnaided[..].Num.MustAnswer = "False"
            OptOutAddtionalUnaided.MustAnswer = "False"
        ' This sets the validation 
	    AdditionalUnaidedWOptOut.Validation.Function = "TextOptOutInOrder"
	    AdditionalUnaidedWOptOut.ask()
 
    
    Block
        MetaData:
        TestBlock "" block fields
        (
            Looptest "" loop
            {
                Hello,
                bye,
                hi
            } fields
            (
                test ""
                text[1..20];
            ) expand grid;
            
            optOut ""
            categorical
            {
                IdontKnow "I Dont Know" DK
            };
        );
        Routing: 
        TestBlock.ask()

Validation Function for adding answers from top to bottom, denying selecting optout while answering,
Function TextOptOutInOrder(Question, IOM, Attempt)
	'On Error Resume Next 'keep going after error, to be handled at the end of the function
	dim Category, ErrFlag, txtAnswer, cat,i, NumberCheck, Counter, CCat, CounterAll,SkippedRows
	txtAnswer = ""
	Counter = 0
	CounterAll = 0
	NumberCheck = 0
	ErrFlag = TRUE
	SkippedRows = FALSE
	for each cat in Question.Item[0].Categories
	Ccat = Ccategorical(cat)
	CounterAll = CounterAll + 1
		If NOT(Question.Item[0].Item[Ccat].Item[0].IsEmpty()) Then
			txtAnswer = txtAnswer + Question.Item[0].Item[Ccat].Item[0].Response
			Counter = Counter + 1
			if Counter < CounterAll then 
'				AddErrBanner(Question.Item[0],"Please make sure to fill out the text boxes in order.")

				SkippedRows = true
			End If
		End if
	next
	
	if len(Question.Item[1]) < 1 and txtAnswer = "" then
	      AddErrBanner(Question.Item[0],"Please select ""I dont know any travel center brands"" if you do not have a response.")
	      'Question.Item[1].Errors.AddNew("Incorrect", IOM.Questions["ErrorBlankResponse"].Label)
	      ErrFlag = False
	elseif len(Question.Item[1]) = 1 and txtAnswer <> "" then
	      AddErrBanner(Question.Item[0],"Please do not select ""I dont know any travel center brands"" with other responses.")
	      'Question.Item[1].Errors.AddNew("Incorrect", IOM.Questions["ErrorBadCombo"].Label)
	      ErrFlag = False
	else
			if (SkippedRows = true) Then
				AddErrBanner(Question.Item[0],"Please make sure to fill out the text boxes in order.")
				'Question.Item[1].Errors.AddNew("Incorrect", IOM.Questions["ErrorIncorrectOrder"].Label)
			    ErrFlag = False
			End if

	End if
	TextOptOutInOrder = ErrFlag
	If Err.Number<>0 Then errorRoutine(IOM)
End Function


===================================================================================================

This is for asssigners and is used in DV_Assigned for HP Gamers
Function Multi Assigned Quota 
Function MultiAssignQuota(IOM,QVar,QPotentialVar,QName,MaxNum,EligibleList,PriorityList,AssignmentSteps)
On Error Resume Next 'keep going after error, to be handled at the end of the function
	'JUST IN CASE this function runs before any other randomization in Routing, calling RanInt() once prevents the first RQ randomization matching metadata-randomized stub order.
	RanInt()
	Dim AssignmentStepArray, ThisStep, ThisStepType, ThisStepMax, ThisStepEligible, ThisStepSP
	Dim Counter
	Dim quota_pend_result
	'Clear any current values in QVar, QPotentialVar. Nothing should be stored here before the function runs.
	QVar = {}
	QPotentialVar = {}
	'break AssignmentSteps into an array. Each step in the assignment is a separate item
	AssignmentStepArray = Split(AssignmentSteps,";")
	'for each step in the assignment
	For Counter = 0 to AssignmentStepArray.UBound()
		ThisStep = Split(AssignmentStepArray[Counter],",")
		ThisStepType = ThisStep[0]
		ThisStepMax = MinOf((MaxNum - QVar.AnswerCount()), clong(ThisStep[1]))
		Select Case ThisStepType
			Case "R"
				ThisStepEligible = EligibleList - QVar
				QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
			Case "RQ"
				ThisStepEligible = EligibleList - QVar
				If IOM.Info.IsDebug Then
					'debug mode - non-quota random assignment
					QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
				else
					QPotentialVar = ThisStepEligible
					IOM.quotaengine.QuotaGroups[QName].PendMode = QuotaPendModes.qpRandom
					'For random assignments, we temporarily pend more items than needed, then use .Ran() to select within those items without matching metadata-randomized stub order. 
					IOM.quotaengine.QuotaGroups[QName].PendLimit= QPotentialVar.AnswerCount()
					quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
					if (IsSet(quota_pend_result, QuotaResultConstants.qrWasPended)) Then
						QVar = QVar + CreateFilterUsingLeastFullQuota(QPotentialVar.Categories, IOM.QuotaEngine.QuotaGroups[QName].Quotas).Ran(ThisStepMax)
					'else
						'don't check for failure, just move on to next step
					End If
					'rollback - leave quota empty for next assignment
					IOM.QuotaEngine.QuotaGroups[QName].Rollback()
					QPotentialVar = {}
				end if
			Case "MN"
				ThisStepEligible = EligibleList - QVar
				If IOM.Info.IsDebug Then
					'debug mode - non-quota random assignment
					QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
				else
					QPotentialVar = ThisStepEligible
					IOM.quotaengine.QuotaGroups[QName].PendMode = QuotaPendModes.qpLeastFull
					IOM.quotaengine.QuotaGroups[QName].PendLimit= ThisStepMax
					quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
					if (IsSet(quota_pend_result, QuotaResultConstants.qrWasPended)) Then
						QVar = QVar + CreateFilterUsingLeastFullQuota(QPotentialVar.Categories, IOM.QuotaEngine.QuotaGroups[QName].Quotas)
					'else
						'don't check for failure, just move on to next step
					End If
					'rollback - leave quota empty for next assignment
					IOM.QuotaEngine.QuotaGroups[QName].Rollback()
					QPotentialVar = {}
				end if
			Case "P"
				ThisStepEligible = PriorityList * (EligibleList - QVar)
				QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
			Case "PQ"
				ThisStepEligible = PriorityList * (EligibleList - QVar)
				If IOM.Info.IsDebug Then
					'debug mode - non-quota random assignment
					QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
				else
					QPotentialVar = ThisStepEligible
					IOM.quotaengine.QuotaGroups[QName].PendMode = QuotaPendModes.qpRandom
					IOM.quotaengine.QuotaGroups[QName].PendLimit= QPotentialVar.AnswerCount()
					quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
					if (IsSet(quota_pend_result, QuotaResultConstants.qrWasPended)) Then
						QVar = QVar + CreateFilterUsingLeastFullQuota(QPotentialVar.Categories, IOM.QuotaEngine.QuotaGroups[QName].Quotas).Ran(ThisStepMax)
					'else
						'don't check for failure, just move on to next step
					End If
					'rollback - leave quota empty for next assignment
					IOM.QuotaEngine.QuotaGroups[QName].Rollback()
					QPotentialVar = {}
				end if
			Case "PMN"
				ThisStepEligible = PriorityList * (EligibleList - QVar)
				If IOM.Info.IsDebug Then
					'debug mode - non-quota random assignment
					QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
				else
					QPotentialVar = ThisStepEligible
					IOM.quotaengine.QuotaGroups[QName].PendMode = QuotaPendModes.qpLeastFull
					IOM.quotaengine.QuotaGroups[QName].PendLimit= ThisStepMax
					quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
					if (IsSet(quota_pend_result, QuotaResultConstants.qrWasPended)) Then
						QVar = QVar + CreateFilterUsingLeastFullQuota(QPotentialVar.Categories, IOM.QuotaEngine.QuotaGroups[QName].Quotas)
					'else
						'don't check for failure, just move on to next step
					End If
					'rollback - leave quota empty for next assignment
					IOM.QuotaEngine.QuotaGroups[QName].Rollback()
					QPotentialVar = {}
				end if
		'NEW May 2016: Special (step-by-step) priority
			Case "SP"
				ThisStepSP = CCategorical(replace(ThisStep[2],"|",","))
				ThisStepEligible = ThisStepSP * (EligibleList - QVar)
				QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
			Case "SPQ"
				ThisStepSP = CCategorical(replace(ThisStep[2],"|",","))
				ThisStepEligible = ThisStepSP * (EligibleList - QVar)
				If IOM.Info.IsDebug Then
					'debug mode - non-quota random assignment
					QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
				else
					QPotentialVar = ThisStepEligible
					IOM.quotaengine.QuotaGroups[QName].PendMode = QuotaPendModes.qpRandom
					IOM.quotaengine.QuotaGroups[QName].PendLimit= QPotentialVar.AnswerCount()
					quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
					if (IsSet(quota_pend_result, QuotaResultConstants.qrWasPended)) Then
						QVar = QVar + CreateFilterUsingLeastFullQuota(QPotentialVar.Categories, IOM.QuotaEngine.QuotaGroups[QName].Quotas).Ran(ThisStepMax)
					'else
						'don't check for failure, just move on to next step
					End If
					'rollback - leave quota empty for next assignment
					IOM.QuotaEngine.QuotaGroups[QName].Rollback()
					QPotentialVar = {}
				end if
			Case "SPMN"
				ThisStepSP = CCategorical(replace(ThisStep[2],"|",","))
				ThisStepEligible = ThisStepSP * (EligibleList - QVar)
				If IOM.Info.IsDebug Then
					'debug mode - non-quota random assignment
					QVar = QVar + ThisStepEligible.Ran(ThisStepMax)
				else
					QPotentialVar = ThisStepEligible
					IOM.quotaengine.QuotaGroups[QName].PendMode = QuotaPendModes.qpLeastFull
					IOM.quotaengine.QuotaGroups[QName].PendLimit= ThisStepMax
					quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
					if (IsSet(quota_pend_result, QuotaResultConstants.qrWasPended)) Then
						QVar = QVar + CreateFilterUsingLeastFullQuota(QPotentialVar.Categories, IOM.QuotaEngine.QuotaGroups[QName].Quotas)
					'else
						'don't check for failure, just move on to next step
					End If
					'rollback - leave quota empty for next assignment
					IOM.QuotaEngine.QuotaGroups[QName].Rollback()
					QPotentialVar = {}
				end if
		End Select
		'Exit loop if Max # of assignments reached, or if all eligible items assigned
		If QVar.AnswerCount() = MinOf(MaxNum,Len(EligibleList)) then exit for
	Next
	'Loop completed - If any categories were assigned, this was successful
	if QVar.IsEmpty() then
		MultiAssignQuota = False
	else
		'Re-pend to quota, with categories assigned in all steps
		If not IOM.Info.IsDebug Then
			QPotentialVar = QVar
			IOM.quotaengine.QuotaGroups[QName].PendLimit = QVar.AnswerCount()
			quota_pend_result = IOM.QuotaEngine.QuotaGroups[QName].Pend()
			'We're NOT checking if this pend was successful, or that all categories assigned were pended.
			'It's POSSSIBLE that this will result in under-counting.
		end if
		MultiAssignQuota = True
	end if
If Err.Number<>0 Then errorRoutine(IOM)
End Function

